# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from blk_arc_grpc import device_pb2 as blk__arc__grpc_dot_device__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DeviceStub(object):
    """* Allows the user to retrieve information about the current state of a BLK device. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeviceState = channel.unary_unary(
                '/api.blk.Device/DeviceState',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_device__pb2.DeviceStateResponse.FromString,
                )
        self.DeviceStateStream = channel.unary_stream(
                '/api.blk.Device/DeviceStateStream',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_device__pb2.DeviceStateResponse.FromString,
                )


class DeviceServicer(object):
    """* Allows the user to retrieve information about the current state of a BLK device. 
    """

    def DeviceState(self, request, context):
        """*
        Get the current device state.

        Authorization Scopes:
        - `info`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeviceStateStream(self, request, context):
        """*
        Stream the current device state and all subsequent state changes.

        Authorization Scopes:
        - `info`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeviceState': grpc.unary_unary_rpc_method_handler(
                    servicer.DeviceState,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=blk__arc__grpc_dot_device__pb2.DeviceStateResponse.SerializeToString,
            ),
            'DeviceStateStream': grpc.unary_stream_rpc_method_handler(
                    servicer.DeviceStateStream,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=blk__arc__grpc_dot_device__pb2.DeviceStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.blk.Device', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Device(object):
    """* Allows the user to retrieve information about the current state of a BLK device. 
    """

    @staticmethod
    def DeviceState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Device/DeviceState',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            blk__arc__grpc_dot_device__pb2.DeviceStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeviceStateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.Device/DeviceStateStream',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            blk__arc__grpc_dot_device__pb2.DeviceStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
