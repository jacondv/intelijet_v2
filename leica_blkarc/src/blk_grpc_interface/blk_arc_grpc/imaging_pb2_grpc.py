# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from blk_arc_grpc import imaging_pb2 as blk__arc__grpc_dot_imaging__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ImagingStub(object):
    """*
    The Imaging service allows a client to perform most operations related to detail and panorama images.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamDetailImages = channel.unary_stream(
                '/api.blk.Imaging/StreamDetailImages',
                request_serializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamRequest.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.FromString,
                )
        self.StreamPanoramaImages = channel.unary_stream(
                '/api.blk.Imaging/StreamPanoramaImages',
                request_serializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamRequest.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.FromString,
                )
        self.StreamPanoramaCamera = channel.unary_stream(
                '/api.blk.Imaging/StreamPanoramaCamera',
                request_serializer=blk__arc__grpc_dot_imaging__pb2.PanoramaCameraStreamRequest.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.FromString,
                )
        self.TakeDetailImage = channel.unary_unary(
                '/api.blk.Imaging/TakeDetailImage',
                request_serializer=blk__arc__grpc_dot_imaging__pb2.TakeDetailImageRequest.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_imaging__pb2.TakeImageResponse.FromString,
                )
        self.TakePanoramaImage = channel.unary_unary(
                '/api.blk.Imaging/TakePanoramaImage',
                request_serializer=blk__arc__grpc_dot_imaging__pb2.TakePanoramaImageRequest.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_imaging__pb2.TakeImageResponse.FromString,
                )
        self.ImageEventStream = channel.unary_stream(
                '/api.blk.Imaging/ImageEventStream',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_imaging__pb2.ImageEvent.FromString,
                )
        self.JudgeImage = channel.unary_unary(
                '/api.blk.Imaging/JudgeImage',
                request_serializer=blk__arc__grpc_dot_imaging__pb2.JudgeImageRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ImageEvents = channel.unary_stream(
                '/api.blk.Imaging/ImageEvents',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_imaging__pb2.ImageEventsResponse.FromString,
                )


class ImagingServicer(object):
    """*
    The Imaging service allows a client to perform most operations related to detail and panorama images.
    """

    def StreamDetailImages(self, request, context):
        """*
        Streams a series of images from the detail camera of the BLK device.
        - These images will not be persisted to disk.
        - This method shall be called both during a capture or whilst the device is idle.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the request cannot be fulfilled by the system due to the arguments provided. The call could be retried with different arguments.
        - gRPC status 4 (DEADLINE_EXCEEDED): If the request cannot be fulfilled in a timeout of 4 seconds.
        - gRPC status 7 (PERMISSION_DENIED): If the caller token does not have access to the necessary scopes for the operation.
        - gRPC status 9 (FAILED_PRECONDITION): If the device has any faults active that do not allow for camera image streaming.
        - gRPC status 16 (UNAUTHENTICATED): If the caller has not provided any Authentication Token in the headers.

        Authorization Scopes:
        - `imaging.stream.detail`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPanoramaImages(self, request, context):
        """*
        Streams a series of panorama images as a composition of the three panorama cameras of the BLK device.
        - These images will not be persisted to disk.
        - Streaming panorama images is only possible inside a scan.
        - NOTE: Panorama images always use automatic exposure. No adjustment of `gain` or `exposure_in_ms` is possible.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the request cannot be fulfilled by the system due to the arguments provided. The call could be retried with different arguments. In particular, this will be thrown if `exposure_mode` is set to `MANUAL`.
        - gRPC status 7 (PERMISSION_DENIED): If the caller token does not have access to the necessary scopes for the operation.
        - gRPC status 9 (FAILED_PRECONDITION): If there is an ongoing capture or there is an active fault. The device must be in an `IDLE` state and no faults shall be present.
        - gRPC status 16 (UNAUTHENTICATED): If the caller has not provided any Authentication Token in the headers.

        Authorization Scopes:
        - `imaging.stream.panorama`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPanoramaCamera(self, request, context):
        """*
        Streams a series of standard images from one of the panorama cameras on the device.
        - These images will not be persisted to disk.
        - Streaming panorama images is only possible outside a scan.
        - Only RAW image streaming is supported for single camera streaming.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the request cannot be fulfilled by the system due to the arguments provided. The call could be retried with different arguments.
        - gRPC status 7 (PERMISSION_DENIED): If the caller token does not have access to the necessary scopes for the operation.
        - gRPC status 9 (FAILED_PRECONDITION): If there is an ongoing capture or there is an active fault. The device must be in an `IDLE` state and no faults shall be present.
        - gRPC status 16 (UNAUTHENTICATED): If the caller has not provided any Authentication Token in the headers.

        Authorization Scopes:
        - `imaging.stream.panorama`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TakeDetailImage(self, request, context):
        """*
        Takes a single detail image during a capture. This can also be achieved using the button on the device.
        A detail image can be judged using `JudgeImage` if `exclude_preview` is set to `false`. Otherwise it will be persisted to disk straightaway.
        An image must be processed by the device and judged before being able to take another detail image.

        Error Codes:
        - gRPC status 8 (RESOURCE_EXHAUSTED): If the previous image taken has not yet been processed and/or judged.
        - gRPC status 9 (FAILED_PRECONDITION): If there is no capture ongoing.

        Authorization Scopes:
        - `imaging`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TakePanoramaImage(self, request, context):
        """*
        Takes a single panorama image during a capture. This can also be achieved using the button on the device.
        A panorama image can be judged using `JudgeImage` if `exclude_preview` is set to `false`. Otherwise it will be persisted to disk straightaway.
        An image must be processed by the device and judged before being able to take another panorama image.

        Error Codes:
        - gRPC status 4 (DEADLINE_EXCEEDED): If the request cannot be fulfilled in a timeout of 4 seconds.
        - gRPC status 8 (RESOURCE_EXHAUSTED): If the previous image taken has not yet been processed and/or judged.
        - gRPC status 9 (FAILED_PRECONDITION): If there is no capture ongoing.

        Authorization Scopes:
        - `imaging`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageEventStream(self, request, context):
        """*
        Deprecated and scheduled for removal. Please use ImageEvents instead.

        Listening to this stream allows a client to get image previews whenever an image is taken, irrespective of the method used (physical device button, `TakeDetailImage` or `TakePanoramaImage`).
        Only images taken after the client starts listening will be streamed.
        This stream will be available regardless of whether there is an ongoing capture.

        Authorization Scopes:
        - `imaging`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JudgeImage(self, request, context):
        """*
        Allows the user to accept or discard an image that has been taken recently as a part of a capture. If the
        timeout is exceeded, the image will be saved to disk automatically and can no longer be judged.

        Error Codes:
        - gRPC status 4 (DEADLINE_EXCEEDED): If the specified timeout for judging an image has been exceeded and the image has already been saved to disk.
        - gRPC status 5 (NOT_FOUND): If the specified `image_id` does not exist. This may also be caused by a wrong selection in the `type` field or if the image has already been judged.
        - gRPC status 9 (FAILED_PRECONDITION): If no capture is in progress.

        Authorization Scopes:
        - `imaging`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageEvents(self, request, context):
        """*
        Listening to this stream allows a client:
        - To get image previews whenever an image is taken, irrespective of the method used (physical device button, `TakeDetailImage` or `TakePanoramaImage`).
        Only images taken after the client starts listening will be streamed.
        - To get image persistence status whether saved or discarded.
        This stream will be available regardless of whether there is an ongoing capture.

        Authorization Scopes:
        - `imaging`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImagingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamDetailImages': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamDetailImages,
                    request_deserializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamRequest.FromString,
                    response_serializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.SerializeToString,
            ),
            'StreamPanoramaImages': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPanoramaImages,
                    request_deserializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamRequest.FromString,
                    response_serializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.SerializeToString,
            ),
            'StreamPanoramaCamera': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPanoramaCamera,
                    request_deserializer=blk__arc__grpc_dot_imaging__pb2.PanoramaCameraStreamRequest.FromString,
                    response_serializer=blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.SerializeToString,
            ),
            'TakeDetailImage': grpc.unary_unary_rpc_method_handler(
                    servicer.TakeDetailImage,
                    request_deserializer=blk__arc__grpc_dot_imaging__pb2.TakeDetailImageRequest.FromString,
                    response_serializer=blk__arc__grpc_dot_imaging__pb2.TakeImageResponse.SerializeToString,
            ),
            'TakePanoramaImage': grpc.unary_unary_rpc_method_handler(
                    servicer.TakePanoramaImage,
                    request_deserializer=blk__arc__grpc_dot_imaging__pb2.TakePanoramaImageRequest.FromString,
                    response_serializer=blk__arc__grpc_dot_imaging__pb2.TakeImageResponse.SerializeToString,
            ),
            'ImageEventStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ImageEventStream,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=blk__arc__grpc_dot_imaging__pb2.ImageEvent.SerializeToString,
            ),
            'JudgeImage': grpc.unary_unary_rpc_method_handler(
                    servicer.JudgeImage,
                    request_deserializer=blk__arc__grpc_dot_imaging__pb2.JudgeImageRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ImageEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.ImageEvents,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=blk__arc__grpc_dot_imaging__pb2.ImageEventsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.blk.Imaging', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Imaging(object):
    """*
    The Imaging service allows a client to perform most operations related to detail and panorama images.
    """

    @staticmethod
    def StreamDetailImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.Imaging/StreamDetailImages',
            blk__arc__grpc_dot_imaging__pb2.ImageStreamRequest.SerializeToString,
            blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamPanoramaImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.Imaging/StreamPanoramaImages',
            blk__arc__grpc_dot_imaging__pb2.ImageStreamRequest.SerializeToString,
            blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamPanoramaCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.Imaging/StreamPanoramaCamera',
            blk__arc__grpc_dot_imaging__pb2.PanoramaCameraStreamRequest.SerializeToString,
            blk__arc__grpc_dot_imaging__pb2.ImageStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TakeDetailImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Imaging/TakeDetailImage',
            blk__arc__grpc_dot_imaging__pb2.TakeDetailImageRequest.SerializeToString,
            blk__arc__grpc_dot_imaging__pb2.TakeImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TakePanoramaImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Imaging/TakePanoramaImage',
            blk__arc__grpc_dot_imaging__pb2.TakePanoramaImageRequest.SerializeToString,
            blk__arc__grpc_dot_imaging__pb2.TakeImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageEventStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.Imaging/ImageEventStream',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            blk__arc__grpc_dot_imaging__pb2.ImageEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JudgeImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Imaging/JudgeImage',
            blk__arc__grpc_dot_imaging__pb2.JudgeImageRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.Imaging/ImageEvents',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            blk__arc__grpc_dot_imaging__pb2.ImageEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
