# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from blk_arc_grpc import scan_library_pb2 as blk__arc__grpc_dot_scan__library__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ScanLibraryStub(object):
    """*
    Allows a user to browse, list, update and download capture data from a BLK device.
    This service is deliberately generic and the methods work on `Items`. An item can be a scan or a camera image, for example.
    Items are addressed by the use of `Selectors`. A selector is a string that acts as a pointer to an item.
    An item has a unique selector path and can optionally have metadata attached.

    The methods described in this API often require the user to specify a `{scan_id}`.
    It can be specified as a number ("1" ... "999999") or as a scan identifier ("ds000001").
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListItems = channel.unary_unary(
                '/api.blk.scanlibrary.ScanLibrary/ListItems',
                request_serializer=blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_scan__library__pb2.ItemList.FromString,
                )
        self.StreamItemInfo = channel.unary_stream(
                '/api.blk.scanlibrary.ScanLibrary/StreamItemInfo',
                request_serializer=blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_scan__library__pb2.ItemInfo.FromString,
                )
        self.LockItem = channel.unary_unary(
                '/api.blk.scanlibrary.ScanLibrary/LockItem',
                request_serializer=blk__arc__grpc_dot_scan__library__pb2.LockItemRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UnlockItem = channel.unary_unary(
                '/api.blk.scanlibrary.ScanLibrary/UnlockItem',
                request_serializer=blk__arc__grpc_dot_scan__library__pb2.UnlockItemRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateItemMetadata = channel.unary_unary(
                '/api.blk.scanlibrary.ScanLibrary/UpdateItemMetadata',
                request_serializer=blk__arc__grpc_dot_scan__library__pb2.UpdateItemMetadataRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DeleteItemMetadata = channel.unary_unary(
                '/api.blk.scanlibrary.ScanLibrary/DeleteItemMetadata',
                request_serializer=blk__arc__grpc_dot_scan__library__pb2.DeleteItemMetadataRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DeleteItem = channel.unary_unary(
                '/api.blk.scanlibrary.ScanLibrary/DeleteItem',
                request_serializer=blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ReadItem = channel.unary_stream(
                '/api.blk.scanlibrary.ScanLibrary/ReadItem',
                request_serializer=blk__arc__grpc_dot_scan__library__pb2.ReadItemRequest.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_scan__library__pb2.ReadItemResponse.FromString,
                )


class ScanLibraryServicer(object):
    """*
    Allows a user to browse, list, update and download capture data from a BLK device.
    This service is deliberately generic and the methods work on `Items`. An item can be a scan or a camera image, for example.
    Items are addressed by the use of `Selectors`. A selector is a string that acts as a pointer to an item.
    An item has a unique selector path and can optionally have metadata attached.

    The methods described in this API often require the user to specify a `{scan_id}`.
    It can be specified as a number ("1" ... "999999") or as a scan identifier ("ds000001").
    """

    def ListItems(self, request, context):
        """*
        List all items matching the selector string in the request and return a list
        including path, details and metadata for each item.
        This call will block until all items have been collected.

        This call may block for a long time until all scan details have been gathered.
        Use StreamItemInfo() for faster results.

        Selectors available:
        - List all scans: `/scan-data/scans`.
        - Get details from a single scan: `/scan-data/scans/{scan_id}`.
        - List all detail camera images in a scan: `/scan-data/scans/{scan_id}/detail-images`.
        - Get metadata from a single detail camera image: `/scan-data/scans/{scan_id}/detail-images/{image_id}`.
        - List all panorama images in a scan: `/scan-data/scans/{scan_id}/pano-images`.
        - Get metadata from a single panorama camera image: `/scan-data/scans/{scan_id}/pano-images/{image_id}`.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the selector provided is invalid regardless of the state of the system (i.e. malformed selector).
        - gRPC status 5 (NOT_FOUND): If the selector provided does not exist.

        Authorization Scopes:
        - `library`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamItemInfo(self, request, context):
        """*
        List all items matching the selector string in the request and return a list
        including path, details and metadata for each item.
        This call is the streaming variant of `ListItems`. It will stream the items one by one instead of
        first generating a list and then returning it.

        Selectors available:
        - List all scans: `/scan-data/scans`.
        - Get details from a single scan: `/scan-data/scans/{scan_id}`.
        - List all detail camera images in a scan: `/scan-data/scans/{scan_id}/detail-images`.
        - Get metadata from a single detail camera image: `/scan-data/scans/{scan_id}/detail-images/{image_id}`.
        - List all panorama images in a scan: `/scan-data/scans/{scan_id}/pano-images`.
        - Get metadata from a single panorama camera image: `/scan-data/scans/{scan_id}/pano-images/{image_id}`.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the selector provided is invalid regardless of the state of the system (i.e. malformed selector).
        - gRPC status 5 (NOT_FOUND): If the selector provided does not exist.

        Authorization Scopes:
        - `library`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockItem(self, request, context):
        """*
        Lock a data storage item. Locked items are protected against modification and deletion.
        Only full scans can be locked, but not images within the scan or any other items.
        Nevertheless, locked items will be deleted upon a Factory Reset of the BLK device.

        Selectors available:
        - Lock a scan: `/scan-data/scans/{scan_id}`.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the selector provided is invalid regardless of the state of the system (i.e. malformed selector).
        - gRPC status 5 (NOT_FOUND): If the selector provided does not exist.
        - gRPC status 6 (ALREADY_EXISTS): If the specified item is already locked.
        - gRPC status 12 (UNIMPLEMENTED): If the requested item is not a scan. Please note this does not mean that locking other types of items will ever be implemented.

        Authorization Scopes:
        - `library`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlockItem(self, request, context):
        """*
        Unlock a data storage item. This makes it possible to alter and delete the item.

        Selectors available:
        - Unlock a scan: `/scan-data/scans/{scan_id}`.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the selector provided is invalid regardless of the state of the system (i.e. malformed selector).
        - gRPC status 5 (NOT_FOUND): If the selector provided does not exist.
        - gRPC status 9 (FAILED_PRECONDITION): If the specified item is currently not locked.
        - gRPC status 12 (UNIMPLEMENTED): If the requested item is not a scan. Please note this does not mean that unlocking other types of items will ever be implemented.

        Authorization Scopes:
        - `library`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateItemMetadata(self, request, context):
        """*
        Update the metadata of an item. The metadata is stored as a key-value map.
        If the specified key does not exist, it will be added to the metadata. If it does exist, the value will be updated.
        Only properties starting with "ext/" can be changed using this API.

        Selectors available:
        - Update scan metadata: `/scan-data/scans/{scan_id}`.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the selector provided is invalid regardless of the state of the system (i.e. malformed selector).
        - gRPC status 5 (NOT_FOUND): If the selector provided does not exist.
        - gRPC status 7 (PERMISSION_DENIED): If the key provided does not start with "ext/". Every other metadata key is read-only.
        - gRPC status 9 (FAILED_PRECONDITION): If the specified item is currently locked.
        - gRPC status 12 (UNIMPLEMENTED): If the requested item is not a scan. Please note this does not mean that updating metadata for other types of items will ever be implemented.

        Authorization Scopes:
        - `library`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteItemMetadata(self, request, context):
        """*
        Delete the specified keys from the metadata of an item.

        Selectors available:
        - Delete scan metadata: `/scan-data/scans/{scan_id}`.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the selector provided is invalid regardless of the state of the system (i.e. malformed selector).
        - gRPC status 5 (NOT_FOUND): If the selector provided does not exist. The error message thrown will be "Selector not found".
        - gRPC status 5 (NOT_FOUND): If any of the specified keys do not exist. In this case, the operation will be aborted and no keys will be removed. The error message thrown will be "One or more of the keys specified do not exist".
        - gRPC status 7 (PERMISSION_DENIED): If the key provided does not start with "ext/". Every other metadata key is read-only.
        - gRPC status 9 (FAILED_PRECONDITION): If the specified item is currently locked.
        - gRPC status 12 (UNIMPLEMENTED): If the requested item is not a scan. Please note this does not mean that deleting metadata for other types of items will ever be implemented.

        Authorization Scopes:
        - `library`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteItem(self, request, context):
        """*
        Delete an item from the BLK device.
        The item and all metadata associated with it will be deleted.

        Selectors available:
        - Delete a specific scan: `/scan-data/scans/{scan_id}`.
        - Delete all scans (except locked ones): `/scan-data/scans`.
        - Delete a detail image: `/scan-data/scans/{scan_id}/detail-images/{image_id}`.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the selector provided is invalid regardless of the state of the system (i.e. malformed selector).
        - gRPC status 5 (NOT_FOUND): If the selector provided does not exist.
        - gRPC status 9 (FAILED_PRECONDITION): If the specified item is currently locked.
        - gRPC status 12 (UNIMPLEMENTED): If the requested item is not a scan. Please note this does not mean that deleting other types of items will ever be implemented.

        Authorization Scopes:
        - `library`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadItem(self, request, context):
        """*
        Retrieves the binary data associated to a given selector. The data is streamed in chunks of a size determined by the device.

        Streams of chunk are always terminated by a last message of chunk_size 0.

        Examples assuming a chunk-size determined by device to be 10 bytes,
        entity size is 24 bytes:
        Read Item request offset = 0, length = 0
        Read Item response # 0: offset =  0, chunk_size = 10
        Read Item response # 1: offset = 10, chunk_size = 10
        Read Item response # 2: offset = 20, chunk_size =  4
        Read Item response # 3: offset = 24, chunk_size =  0

        Read Item request offset = 8, length = 4
        Read Item response # 0: offset =  8, chunk_size =  4
        Read Item response # 1: offset = 12, chunk_size =  0

        NOTE: It is usually faster to download large scan files using the REST API. As an example:
        `curl http://{device-ip}/scandata/dsXXXXXX.b2g` will download scan file XXXXXX. This is always 6 characters long and leading zeroes must be added if necessary (for scan 42 -> 000042).
        This URL can also be entered in a browser for the file to be downloaded.

        Selectors available:
        - Download a scan file (.b2g file): `/scan-data/scans/{scan_id}`.
        - Download a detail camera image. The format is implementation defined and may be different for different firmware versions:
        `/scan-data/scans/{scan_id}/detail-images/{image_id}`.
        - Download a detail camera image in raw format. (Only available for scans taken with v2.2.0+):
        `/scan-data/scans/{scan_id}/detail-images/{image_id}/raw`.
        - Download a detail camera image as a low resolution JPEG. (Only available for scans taken with v2.2.0+):
        `/scan-data/scans/{scan_id}/detail-images/{image_id}/jpeg-preview`.
        - Download a detail camera image as ready to use full resolution JPEG. (Only available for scans taken with v3.3.0+):
        `/scan-data/scans/{scan_id}/detail-images/{image_id}/jpeg-full`.
        - Download a panorama camera image. The format is implementation defined and may be different for different firmware versions:
        `/scan-data/scans/{scan_id}/pano-images/{image_id}`.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the selector provided is invalid regardless of the state of the system (i.e. malformed selector).
        - gRPC status 5 (NOT_FOUND): If the selector provided does not exist.
        - gRPC status 11 (OUT_OF_RANGE): If the `offset` or `length` fields exceed the file size or surpass the end of the file.

        Authorization Scopes:
        - `library`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScanLibraryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListItems': grpc.unary_unary_rpc_method_handler(
                    servicer.ListItems,
                    request_deserializer=blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.FromString,
                    response_serializer=blk__arc__grpc_dot_scan__library__pb2.ItemList.SerializeToString,
            ),
            'StreamItemInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamItemInfo,
                    request_deserializer=blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.FromString,
                    response_serializer=blk__arc__grpc_dot_scan__library__pb2.ItemInfo.SerializeToString,
            ),
            'LockItem': grpc.unary_unary_rpc_method_handler(
                    servicer.LockItem,
                    request_deserializer=blk__arc__grpc_dot_scan__library__pb2.LockItemRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UnlockItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlockItem,
                    request_deserializer=blk__arc__grpc_dot_scan__library__pb2.UnlockItemRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateItemMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItemMetadata,
                    request_deserializer=blk__arc__grpc_dot_scan__library__pb2.UpdateItemMetadataRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteItemMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItemMetadata,
                    request_deserializer=blk__arc__grpc_dot_scan__library__pb2.DeleteItemMetadataRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteItem': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItem,
                    request_deserializer=blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ReadItem': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadItem,
                    request_deserializer=blk__arc__grpc_dot_scan__library__pb2.ReadItemRequest.FromString,
                    response_serializer=blk__arc__grpc_dot_scan__library__pb2.ReadItemResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.blk.scanlibrary.ScanLibrary', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ScanLibrary(object):
    """*
    Allows a user to browse, list, update and download capture data from a BLK device.
    This service is deliberately generic and the methods work on `Items`. An item can be a scan or a camera image, for example.
    Items are addressed by the use of `Selectors`. A selector is a string that acts as a pointer to an item.
    An item has a unique selector path and can optionally have metadata attached.

    The methods described in this API often require the user to specify a `{scan_id}`.
    It can be specified as a number ("1" ... "999999") or as a scan identifier ("ds000001").
    """

    @staticmethod
    def ListItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.scanlibrary.ScanLibrary/ListItems',
            blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.SerializeToString,
            blk__arc__grpc_dot_scan__library__pb2.ItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamItemInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.scanlibrary.ScanLibrary/StreamItemInfo',
            blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.SerializeToString,
            blk__arc__grpc_dot_scan__library__pb2.ItemInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.scanlibrary.ScanLibrary/LockItem',
            blk__arc__grpc_dot_scan__library__pb2.LockItemRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlockItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.scanlibrary.ScanLibrary/UnlockItem',
            blk__arc__grpc_dot_scan__library__pb2.UnlockItemRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateItemMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.scanlibrary.ScanLibrary/UpdateItemMetadata',
            blk__arc__grpc_dot_scan__library__pb2.UpdateItemMetadataRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteItemMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.scanlibrary.ScanLibrary/DeleteItemMetadata',
            blk__arc__grpc_dot_scan__library__pb2.DeleteItemMetadataRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.scanlibrary.ScanLibrary/DeleteItem',
            blk__arc__grpc_dot_scan__library__pb2.ListItemsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.scanlibrary.ScanLibrary/ReadItem',
            blk__arc__grpc_dot_scan__library__pb2.ReadItemRequest.SerializeToString,
            blk__arc__grpc_dot_scan__library__pb2.ReadItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
