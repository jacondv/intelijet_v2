# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from blk_arc_grpc import network_pb2 as blk__arc__grpc_dot_network__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class NetworkStub(object):
    """*
    This service contains the methods to retrieve network information and perform some basic network operations on the BLK devices.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNetworkInformation = channel.unary_unary(
                '/api.blk.Network/GetNetworkInformation',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_network__pb2.NetworkInformationResponse.FromString,
                )
        self.OverrideUSBGateway = channel.unary_unary(
                '/api.blk.Network/OverrideUSBGateway',
                request_serializer=blk__arc__grpc_dot_network__pb2.OverrideUSBGatewayRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class NetworkServicer(object):
    """*
    This service contains the methods to retrieve network information and perform some basic network operations on the BLK devices.
    """

    def GetNetworkInformation(self, request, context):
        """*
        Get a list of the available BLK device network interfaces, paired with their respective IP and MAC addresses.

        Error Codes:
        - gRPC status 7 (PERMISSION_DENIED): If the caller token does not have access to the necessary scopes for the operation.
        - gRPC status 16 (UNAUTHENTICATED): If the caller has not provided any Authentication Token in the headers.

        Authorization Scopes:
        - `network.information`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OverrideUSBGateway(self, request, context):
        """*
        Override the gateway IP address used on the USB interface. The specified address is where the BLK device website and gRPC services will be available.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If the IP address specified is not a valid IPv4 address.
        - gRPC status 7 (PERMISSION_DENIED): If the caller token does not have access to the necessary scopes for the operation.
        - gRPC status 16 (UNAUTHENTICATED): If the caller has not provided any Authentication Token in the headers.

        Authorization Scopes:
        - `network.usb.gateway`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNetworkInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNetworkInformation,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=blk__arc__grpc_dot_network__pb2.NetworkInformationResponse.SerializeToString,
            ),
            'OverrideUSBGateway': grpc.unary_unary_rpc_method_handler(
                    servicer.OverrideUSBGateway,
                    request_deserializer=blk__arc__grpc_dot_network__pb2.OverrideUSBGatewayRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.blk.Network', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Network(object):
    """*
    This service contains the methods to retrieve network information and perform some basic network operations on the BLK devices.
    """

    @staticmethod
    def GetNetworkInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Network/GetNetworkInformation',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            blk__arc__grpc_dot_network__pb2.NetworkInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OverrideUSBGateway(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Network/OverrideUSBGateway',
            blk__arc__grpc_dot_network__pb2.OverrideUSBGatewayRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
