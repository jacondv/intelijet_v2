# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from blk_arc_grpc import fault_pb2 as blk__arc__grpc_dot_fault__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class FaultStub(object):
    """*
    Allows a client to view active faults, get resolution advice and clear faults whenever possible.
    A particular fault is identified by the combination of a fault location (FLOC) and a fault code.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFaultReport = channel.unary_unary(
                '/api.blk.Fault/GetFaultReport',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_fault__pb2.FaultReportList.FromString,
                )
        self.StreamFaultReport = channel.unary_stream(
                '/api.blk.Fault/StreamFaultReport',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_fault__pb2.FaultReport.FromString,
                )
        self.AcknowledgeFault = channel.unary_unary(
                '/api.blk.Fault/AcknowledgeFault',
                request_serializer=blk__arc__grpc_dot_fault__pb2.AcknowledgeFaultRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class FaultServicer(object):
    """*
    Allows a client to view active faults, get resolution advice and clear faults whenever possible.
    A particular fault is identified by the combination of a fault location (FLOC) and a fault code.
    """

    def GetFaultReport(self, request, context):
        """*
        Return a list of all currently active faults.

        Authorization Scopes:
        - `info`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamFaultReport(self, request, context):
        """*
        Return all current faults on the device and stream any new faults raised after the stream was started.
        This stream can be started even if no faults are present.

        Authorization Scopes:
        - `info`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcknowledgeFault(self, request, context):
        """*
        Acknowledges a fault on the device and clears it if the fault is recoverable.
        A fault is identified by a `location` + `code` pair.

        Error Codes:
        - gRPC status 3 (INVALID_ARGUMENT): If one of the arguments provided is invalid. For example, the fault location is not recognised or has a wrong format.
        - gRPC status 5 (NOT_FOUND): If the fault code specified cannot be found. For example, if there is no such fault active or the fault has already been acknowledged previously.
        - gRPC status 9 (FAILED_PRECONDITION): If the specified fault is not recoverable, and thus cannot be acknowledged.

        Authorization Scopes:
        - `info`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaultServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFaultReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFaultReport,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=blk__arc__grpc_dot_fault__pb2.FaultReportList.SerializeToString,
            ),
            'StreamFaultReport': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamFaultReport,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=blk__arc__grpc_dot_fault__pb2.FaultReport.SerializeToString,
            ),
            'AcknowledgeFault': grpc.unary_unary_rpc_method_handler(
                    servicer.AcknowledgeFault,
                    request_deserializer=blk__arc__grpc_dot_fault__pb2.AcknowledgeFaultRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.blk.Fault', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Fault(object):
    """*
    Allows a client to view active faults, get resolution advice and clear faults whenever possible.
    A particular fault is identified by the combination of a fault location (FLOC) and a fault code.
    """

    @staticmethod
    def GetFaultReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Fault/GetFaultReport',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            blk__arc__grpc_dot_fault__pb2.FaultReportList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamFaultReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.blk.Fault/StreamFaultReport',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            blk__arc__grpc_dot_fault__pb2.FaultReport.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcknowledgeFault(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Fault/AcknowledgeFault',
            blk__arc__grpc_dot_fault__pb2.AcknowledgeFaultRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
