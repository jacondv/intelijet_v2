# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from blk_arc_grpc import clock_pb2 as blk__arc__grpc_dot_clock__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ClockStub(object):
    """*
    The following operations are used to retrieve timestamps and clock ticks
    from a BLK device. This can be used to obtain the correspondence between the different timestamps,
    and convert between FPGA and UTC in every other service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCurrentDateTime = channel.unary_unary(
                '/api.blk.Clock/GetCurrentDateTime',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=blk__arc__grpc_dot_clock__pb2.TimestampsResponse.FromString,
                )


class ClockServicer(object):
    """*
    The following operations are used to retrieve timestamps and clock ticks
    from a BLK device. This can be used to obtain the correspondence between the different timestamps,
    and convert between FPGA and UTC in every other service.
    """

    def GetCurrentDateTime(self, request, context):
        """*
        Get the current time of all clocks on the device.
        System time is provided in UTC Epoch time.
        FPGA clocks return duration since power-on (uptime).

        Authorization Scopes:
        - `info`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClockServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCurrentDateTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentDateTime,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=blk__arc__grpc_dot_clock__pb2.TimestampsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.blk.Clock', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Clock(object):
    """*
    The following operations are used to retrieve timestamps and clock ticks
    from a BLK device. This can be used to obtain the correspondence between the different timestamps,
    and convert between FPGA and UTC in every other service.
    """

    @staticmethod
    def GetCurrentDateTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.blk.Clock/GetCurrentDateTime',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            blk__arc__grpc_dot_clock__pb2.TimestampsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
